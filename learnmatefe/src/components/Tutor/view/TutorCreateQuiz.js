import React, { useState, useEffect } from "react";
import "./TutorCreateQuiz.scss";
import {
  getSubjectsByTutor,
  getMyQuizzes,
  createQuiz,
  updateQuiz,
  importQuestionsFromExcel,
  getQuestionsByQuiz,
  updateQuestion,
  deleteQuestion,
} from "../ApiTutor";
import axios from "axios";
import Cookies from "js-cookie";
import { toast } from "react-toastify";

const TutorCreateQuiz = () => {
  const [subjects, setSubjects] = useState([]);
  const [quizzes, setQuizzes] = useState([]);
  const [selectedSubject, setSelectedSubject] = useState("");
  const [selectedQuiz, setSelectedQuiz] = useState("");
  const [quizTitle, setQuizTitle] = useState("");
  const [quizId, setQuizId] = useState("");
  const [file, setFile] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(false);

  // ‚úÖ Load d·ªØ li·ªáu ban ƒë·∫ßu
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [subjectRes, quizRes] = await Promise.all([
          getSubjectsByTutor(),
          getMyQuizzes(),
        ]);
        setSubjects(subjectRes.subjects || subjectRes.data || []);
        setQuizzes(quizRes.quizzes || quizRes.data || []);
      } catch (error) {
        console.error("Error fetching data:", error);
        toast.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu m√¥n h·ªçc ho·∫∑c quiz.");
      }
    };
    fetchData();
  }, []);

  // ‚úÖ T·∫°o quiz m·ªõi
  const handleCreateQuiz = async () => {
    if (!selectedSubject || !quizTitle) {
      return toast.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn m√¥n h·ªçc v√† nh·∫≠p ti√™u ƒë·ªÅ quiz.");
    }

    setLoading(true);
    try {
      const res = await createQuiz({
        subjectId: selectedSubject,
        title: quizTitle,
      });

      const newQuizId = res.quiz?._id || res.data?.quiz?._id;
      setQuizId(newQuizId);
      setSelectedQuiz(newQuizId);
      setQuestions([]);
      toast.success(`‚úÖ Quiz "${quizTitle}" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!`);

      const quizRes = await getMyQuizzes();
      setQuizzes(quizRes.quizzes || quizRes.data || []);
    } catch (error) {
      toast.error("‚ùå L·ªói khi t·∫°o quiz: " + (error.message || "Kh√¥ng x√°c ƒë·ªãnh."));
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ Ch·ªçn quiz c√≥ s·∫µn
  const handleSelectExistingQuiz = async (e) => {
    const id = e.target.value;
    setSelectedQuiz(id);
    setQuizId(id);

    if (!id) {
      setQuestions([]);
      return;
    }

    try {
      const res = await getQuestionsByQuiz(id);
      setQuestions(res.data.questions || res.data?.data?.questions || []);
      const quiz = quizzes.find((q) => q._id === id);
      setQuizTitle(quiz?.title || "");
      toast.info("üìö ƒêang ch·ªçn quiz s·∫µn c√≥ ƒë·ªÉ import ho·∫∑c c·∫≠p nh·∫≠t c√¢u h·ªèi.");
    } catch (error) {
      console.error("Error loading questions:", error);
      toast.error("‚ùå L·ªói khi t·∫£i danh s√°ch c√¢u h·ªèi c·ªßa quiz.");
    }
  };

  // ‚úÖ Import c√¢u h·ªèi t·ª´ Excel
  const handleImportQuestions = async () => {
    if (!quizId) return toast.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn ho·∫∑c t·∫°o quiz tr∆∞·ªõc khi import!");
    if (!file) return toast.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn file Excel ƒë·ªÉ import!");

    setLoading(true);
    try {
      const res = await importQuestionsFromExcel(quizId, file);
      toast.success(res.message || "‚úÖ Import c√¢u h·ªèi th√†nh c√¥ng!");
      const updated = await getQuestionsByQuiz(quizId);
      setQuestions(updated.data.questions || updated.data?.data?.questions || []);
    } catch (error) {
      console.error("Import error:", error);
      toast.error("‚ùå L·ªói khi import c√¢u h·ªèi: " + (error.message || "Kh√¥ng x√°c ƒë·ªãnh."));
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ C·∫≠p nh·∫≠t quiz
  const handleUpdateQuiz = async () => {
    if (!quizId) return toast.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn quiz!");
    try {
      await updateQuiz(quizId, { title: quizTitle });
      toast.success("‚úÖ C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!");
      const updated = await getMyQuizzes();
      setQuizzes(updated.quizzes || updated.data || []);
    } catch (error) {
      toast.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t quiz.");
    }
  };

  // ‚úÖ Xo√° quiz
  const handleDeleteQuiz = async () => {
    if (!quizId) return toast.warning("‚ö†Ô∏è Ch∆∞a ch·ªçn quiz!");
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° quiz n√†y?")) return;

    try {
      const token = Cookies.get("accessToken");
      await axios.delete(`/api/quiz/${quizId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      toast.success("üóëÔ∏è Xo√° quiz th√†nh c√¥ng!");
      setSelectedQuiz("");
      setQuizId("");
      setQuestions([]);
      setQuizTitle("");
      const refreshed = await getMyQuizzes();
      setQuizzes(refreshed.quizzes || refreshed.data || []);
    } catch (error) {
      toast.error("‚ùå L·ªói khi xo√° quiz.");
    }
  };

  return (
    <div className="tutor-create-quiz">
      <h2>üß© T·∫°o / C·∫≠p nh·∫≠t Quiz & Qu·∫£n l√Ω C√¢u h·ªèi</h2>

      {/* --- CH·ªåN QUIZ C≈® --- */}
      <div className="form-group">
        <label>üéì Ch·ªçn quiz ƒë√£ c√≥:</label>
        <select value={selectedQuiz} onChange={handleSelectExistingQuiz}>
          <option value="">-- Ch∆∞a ch·ªçn quiz n√†o --</option>
          {quizzes.map((q) => (
            <option key={q._id} value={q._id}>
              {q.title} ({q.subjectId?.name})
            </option>
          ))}
        </select>
      </div>

      {!selectedQuiz && <div className="divider">Ho·∫∑c</div>}

      {/* --- T·∫†O QUIZ M·ªöI --- */}
      {!selectedQuiz && (
        <div className="quiz-form">
          <div className="form-group">
            <label>M√¥n h·ªçc:</label>
            <select
              value={selectedSubject}
              onChange={(e) => setSelectedSubject(e.target.value)}
            >
              <option value="">-- Ch·ªçn m√¥n h·ªçc --</option>
              {subjects.map((s) => (
                <option key={s._id} value={s._id}>
                  {s.name} - l·ªõp {s.classLevel}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label>Ti√™u ƒë·ªÅ quiz:</label>
            <input
              type="text"
              value={quizTitle}
              onChange={(e) => setQuizTitle(e.target.value)}
              placeholder="VD: Ki·ªÉm tra To√°n l·ªõp 3"
            />
          </div>

          <button
            type="button"
            onClick={handleCreateQuiz}
            className="create-quiz-btn"
            disabled={loading}
          >
            {loading ? "ƒêang t·∫°o quiz..." : "üìù T·∫°o Quiz M·ªõi"}
          </button>
        </div>
      )}

      {/* --- IMPORT FILE + QU·∫¢N L√ù QUIZ --- */}
      {selectedQuiz && (
        <div className="import-section">
          <h3>üì• Import & Qu·∫£n l√Ω quiz</h3>
          <input
            type="text"
            value={quizTitle}
            onChange={(e) => setQuizTitle(e.target.value)}
            placeholder="C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ quiz..."
          />
          <div className="quiz-actions">
            <button onClick={handleUpdateQuiz}>üíæ C·∫≠p nh·∫≠t quiz</button>
            <button onClick={handleDeleteQuiz} className="delete-btn">
              üóëÔ∏è Xo√° quiz
            </button>
          </div>

          <input
            type="file"
            accept=".xlsx, .xls"
            onChange={(e) => setFile(e.target.files[0])}
          />
          <button
            type="button"
            onClick={handleImportQuestions}
            className="import-btn"
            disabled={loading}
          >
            {loading ? "ƒêang import..." : "üì§ Import file Excel"}
          </button>

          <p className="note">
            File c·∫ßn c√≥ c√°c c·ªôt: <b>C√¢u h·ªèi, A, B, C, D, ƒê√°p √°n</b>
          </p>

          {/* --- DANH S√ÅCH C√ÇU H·ªéI --- */}
          {questions.length > 0 && (
            <div className="question-list">
              <h4>üìã Danh s√°ch c√¢u h·ªèi ({questions.length}):</h4>
              <ul>
                {questions.map((q, i) => (
                  <li key={q._id}>
                    <b>{i + 1}.</b>{" "}
                    <input
                      type="text"
                      value={q.text}
                      onChange={(e) => {
                        const updated = [...questions];
                        updated[i].text = e.target.value;
                        setQuestions(updated);
                      }}
                    />
                    <ul>
                      {q.options?.map((opt, idx) => (
                        <li key={idx}>
                          <input
                            type="text"
                            value={opt}
                            onChange={(e) => {
                              const updated = [...questions];
                              updated[i].options[idx] = e.target.value;
                              setQuestions(updated);
                            }}
                          />
                          <input
                            type="radio"
                            checked={idx === q.correctAnswer}
                            onChange={() => {
                              const updated = [...questions];
                              updated[i].correctAnswer = idx;
                              setQuestions(updated);
                            }}
                          />
                          <label>‚úÖ</label>
                        </li>
                      ))}
                    </ul>

                    <div className="question-actions">
                      <button
                        onClick={async () => {
                          try {
                            await updateQuestion(q._id, {
                              questionText: q.text,
                              options: q.options,
                              correctAnswer: q.correctAnswer,
                            });
                            toast.success("üíæ C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!");
                          } catch (error) {
                            toast.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi.");
                          }
                        }}
                      >
                        üíæ L∆∞u
                      </button>

                      <button
                        onClick={async () => {
                          if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° c√¢u h·ªèi n√†y?")) return;
                          try {
                            await deleteQuestion(q._id);
                            const updated = questions.filter(
                              (item) => item._id !== q._id
                            );
                            setQuestions(updated);
                            toast.success("üóëÔ∏è ƒê√£ xo√° c√¢u h·ªèi!");
                          } catch (error) {
                            toast.error("‚ùå L·ªói khi xo√° c√¢u h·ªèi.");
                          }
                        }}
                        className="delete-btn"
                      >
                        üóëÔ∏è Xo√°
                      </button>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default TutorCreateQuiz;
